name: Build
on:
  release:
    types: [published]
jobs:
  docker:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      id-token: write
    steps:
    - uses: 'actions/checkout@v4'
    - name: Extract branch name
      shell: bash
      run: echo "branch=${GITHUB_REF#refs/heads/}"  >> $GITHUB_OUTPUT
      id: extract_branch
    - name: Extract tag name
      shell: bash
      run: |-
        t=$(echo ${GITHUB_SHA} | cut -c1-7)
        echo "tag=$t" >> $GITHUB_OUTPUT
      id: extract_tag
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: ${{ secrets.GCLOUD_OIDC_POOL }}
        create_credentials_file: true
        service_account: ${{ secrets.GSA }}
        token_format: 'access_token'
    - uses: 'docker/login-action@v3'
      name: 'Docker login'
      with:
        registry: 'us-docker.pkg.dev'
        username: 'oauth2accesstoken'
        password: '${{ steps.auth.outputs.access_token }}'
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        push: true
        build-args: ${{ inputs.build-args }}
        tags: |
          us-docker.pkg.dev/${{ secrets.GCLOUD_PROJECT }}/internal/islandora-workbench:${{steps.extract_branch.outputs.branch}}-${{steps.extract_tag.outputs.tag}}
          us-docker.pkg.dev/${{ secrets.GCLOUD_PROJECT }}/internal/islandora-workbench:${{steps.extract_branch.outputs.branch}}
  binary:
    name: Build binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-12
            ARCH: x86_64
            TARGET: macos
            CMD_BUILD: pyinstaller workbench --onefile --name workbench-macos-12-x86_64
            OUT_FILE_NAME: workbench-macos-12-x86_64
            ASSET_MIME: application/zip
          - os: macos-12
            ARCH: arm64
            TARGET: macos
            CMD_BUILD: pyinstaller workbench --onefile --name workbench-macos-12-arm64
            OUT_FILE_NAME: workbench-macos-12-arm64
            ASSET_MIME: application/zip
          - os: macos-12
            ARCH: universal2
            TARGET: macos
            CMD_BUILD: pyinstaller workbench --onefile --name workbench-macos-12-universal2
            OUT_FILE_NAME: workbench-macos-12-universal2
            ASSET_MIME: application/zip
          - os: macos-13
            ARCH: x86_64
            TARGET: macos
            CMD_BUILD: pyinstaller workbench --onefile --name workbench-macos-13-x86_64
            OUT_FILE_NAME: workbench-macos-13-x86_64
            ASSET_MIME: application/zip
          - os: macos-13
            ARCH: arm64
            TARGET: macos
            CMD_BUILD: pyinstaller workbench --onefile --name workbench-macos-13-arm64
            OUT_FILE_NAME: workbench-macos-13-arm64
            ASSET_MIME: application/zip
          - os: macos-13
            ARCH: universal2
            TARGET: macos
            CMD_BUILD: pyinstaller workbench --onefile --name workbench-macos-13-universal2
            OUT_FILE_NAME: workbench-macos-13-universal2
            ASSET_MIME: application/zip
          - os: ubuntu-latest
            TARGET: linux
            CMD_BUILD: pyinstaller workbench --onefile --name workbench-linux
            OUT_FILE_NAME: workbench-linux
            ASSET_MIME: application/zip
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: pyinstaller workbench --onefile --name workbench 
            OUT_FILE_NAME: workbench.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install "pyinstaller" "requests>=2.22,<3" "requests_cache" "ruamel.yaml<=0.17.21" "progress_bar" "openpyxl" "unidecode" "edtf_validate" "typing-extensions" "rich"        
    - name: Build for ${{matrix.TARGET}}
      run: ${{matrix.CMD_BUILD}}    
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
        asset_name: ${{ matrix.OUT_FILE_NAME}}
        asset_content_type: ${{ matrix.ASSET_MIME}}
